#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Core.WebApi
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="UCI_DB")]
	public partial class DbContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBillTransaction(BillTransaction instance);
    partial void UpdateBillTransaction(BillTransaction instance);
    partial void DeleteBillTransaction(BillTransaction instance);
    partial void InsertVoucherTransaction(VoucherTransaction instance);
    partial void UpdateVoucherTransaction(VoucherTransaction instance);
    partial void DeleteVoucherTransaction(VoucherTransaction instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertFundTransferTransaction(FundTransferTransaction instance);
    partial void UpdateFundTransferTransaction(FundTransferTransaction instance);
    partial void DeleteFundTransferTransaction(FundTransferTransaction instance);
    partial void InsertMerchantInfo(MerchantInfo instance);
    partial void UpdateMerchantInfo(MerchantInfo instance);
    partial void DeleteMerchantInfo(MerchantInfo instance);
    partial void InsertPaymentTransaction(PaymentTransaction instance);
    partial void UpdatePaymentTransaction(PaymentTransaction instance);
    partial void DeletePaymentTransaction(PaymentTransaction instance);
    partial void InsertRequest(Request instance);
    partial void UpdateRequest(Request instance);
    partial void DeleteRequest(Request instance);
    partial void InsertTopupTransaction(TopupTransaction instance);
    partial void UpdateTopupTransaction(TopupTransaction instance);
    partial void DeleteTopupTransaction(TopupTransaction instance);
    partial void InsertTransactionMask(TransactionMask instance);
    partial void UpdateTransactionMask(TransactionMask instance);
    partial void DeleteTransactionMask(TransactionMask instance);
    partial void InsertTransactionResponseMask(TransactionResponseMask instance);
    partial void UpdateTransactionResponseMask(TransactionResponseMask instance);
    partial void DeleteTransactionResponseMask(TransactionResponseMask instance);
    partial void InsertUnit(Unit instance);
    partial void UpdateUnit(Unit instance);
    partial void DeleteUnit(Unit instance);
    #endregion
		
		public DbContextDataContext() : 
				base(global::Core.WebApi.Properties.Settings.Default.UCIConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DbContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BillTransaction> BillTransactions
		{
			get
			{
				return this.GetTable<BillTransaction>();
			}
		}
		
		public System.Data.Linq.Table<VoucherTransaction> VoucherTransactions
		{
			get
			{
				return this.GetTable<VoucherTransaction>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<FundTransferTransaction> FundTransferTransactions
		{
			get
			{
				return this.GetTable<FundTransferTransaction>();
			}
		}
		
		public System.Data.Linq.Table<MerchantInfo> MerchantInfos
		{
			get
			{
				return this.GetTable<MerchantInfo>();
			}
		}
		
		public System.Data.Linq.Table<PaymentTransaction> PaymentTransactions
		{
			get
			{
				return this.GetTable<PaymentTransaction>();
			}
		}
		
		public System.Data.Linq.Table<Request> Requests
		{
			get
			{
				return this.GetTable<Request>();
			}
		}
		
		public System.Data.Linq.Table<TopupTransaction> TopupTransactions
		{
			get
			{
				return this.GetTable<TopupTransaction>();
			}
		}
		
		public System.Data.Linq.Table<TransactionMask> TransactionMasks
		{
			get
			{
				return this.GetTable<TransactionMask>();
			}
		}
		
		public System.Data.Linq.Table<TransactionResponseMask> TransactionResponseMasks
		{
			get
			{
				return this.GetTable<TransactionResponseMask>();
			}
		}
		
		public System.Data.Linq.Table<Unit> Units
		{
			get
			{
				return this.GetTable<Unit>();
			}
		}
		
		public System.Data.Linq.Table<ClientInfo> ClientInfos
		{
			get
			{
				return this.GetTable<ClientInfo>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BillTransaction")]
	public partial class BillTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _PaymentId;
		
		private string _BilId;
		
		private string _Amount;
		
		private System.Nullable<long> _RequestId;
		
		private EntityRef<Request> _Request;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnPaymentIdChanging(string value);
    partial void OnPaymentIdChanged();
    partial void OnBilIdChanging(string value);
    partial void OnBilIdChanged();
    partial void OnAmountChanging(string value);
    partial void OnAmountChanged();
    partial void OnRequestIdChanging(System.Nullable<long> value);
    partial void OnRequestIdChanged();
    #endregion
		
		public BillTransaction()
		{
			this._Request = default(EntityRef<Request>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentId", DbType="Char(16)")]
		public string PaymentId
		{
			get
			{
				return this._PaymentId;
			}
			set
			{
				if ((this._PaymentId != value))
				{
					this.OnPaymentIdChanging(value);
					this.SendPropertyChanging();
					this._PaymentId = value;
					this.SendPropertyChanged("PaymentId");
					this.OnPaymentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BilId", DbType="Char(16)")]
		public string BilId
		{
			get
			{
				return this._BilId;
			}
			set
			{
				if ((this._BilId != value))
				{
					this.OnBilIdChanging(value);
					this.SendPropertyChanging();
					this._BilId = value;
					this.SendPropertyChanged("BilId");
					this.OnBilIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Char(16)")]
		public string Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestId", DbType="BigInt")]
		public System.Nullable<long> RequestId
		{
			get
			{
				return this._RequestId;
			}
			set
			{
				if ((this._RequestId != value))
				{
					if (this._Request.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestIdChanging(value);
					this.SendPropertyChanging();
					this._RequestId = value;
					this.SendPropertyChanged("RequestId");
					this.OnRequestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_BillTransaction", Storage="_Request", ThisKey="RequestId", OtherKey="Id", IsForeignKey=true)]
		public Request Request
		{
			get
			{
				return this._Request.Entity;
			}
			set
			{
				Request previousValue = this._Request.Entity;
				if (((previousValue != value) 
							|| (this._Request.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Request.Entity = null;
						previousValue.BillTransactions.Remove(this);
					}
					this._Request.Entity = value;
					if ((value != null))
					{
						value.BillTransactions.Add(this);
						this._RequestId = value.Id;
					}
					else
					{
						this._RequestId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Request");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VoucherTransaction")]
	public partial class VoucherTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private int _OperatorId;
		
		private string _Amount;
		
		private long _RequestId;
		
		private EntityRef<Request> _Request;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnOperatorIdChanging(int value);
    partial void OnOperatorIdChanged();
    partial void OnAmountChanging(string value);
    partial void OnAmountChanged();
    partial void OnRequestIdChanging(long value);
    partial void OnRequestIdChanged();
    #endregion
		
		public VoucherTransaction()
		{
			this._Request = default(EntityRef<Request>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperatorId", DbType="Int NOT NULL")]
		public int OperatorId
		{
			get
			{
				return this._OperatorId;
			}
			set
			{
				if ((this._OperatorId != value))
				{
					this.OnOperatorIdChanging(value);
					this.SendPropertyChanging();
					this._OperatorId = value;
					this.SendPropertyChanged("OperatorId");
					this.OnOperatorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Char(16)")]
		public string Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestId", DbType="BigInt NOT NULL")]
		public long RequestId
		{
			get
			{
				return this._RequestId;
			}
			set
			{
				if ((this._RequestId != value))
				{
					if (this._Request.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestIdChanging(value);
					this.SendPropertyChanging();
					this._RequestId = value;
					this.SendPropertyChanged("RequestId");
					this.OnRequestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_VoucherTransaction", Storage="_Request", ThisKey="RequestId", OtherKey="Id", IsForeignKey=true)]
		public Request Request
		{
			get
			{
				return this._Request.Entity;
			}
			set
			{
				Request previousValue = this._Request.Entity;
				if (((previousValue != value) 
							|| (this._Request.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Request.Entity = null;
						previousValue.VoucherTransactions.Remove(this);
					}
					this._Request.Entity = value;
					if ((value != null))
					{
						value.VoucherTransactions.Add(this);
						this._RequestId = value.Id;
					}
					else
					{
						this._RequestId = default(long);
					}
					this.SendPropertyChanged("Request");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<MerchantInfo> _MerchantInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public Customer()
		{
			this._MerchantInfos = new EntitySet<MerchantInfo>(new Action<MerchantInfo>(this.attach_MerchantInfos), new Action<MerchantInfo>(this.detach_MerchantInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_MerchantInfo", Storage="_MerchantInfos", ThisKey="Id", OtherKey="CustomerId")]
		public EntitySet<MerchantInfo> MerchantInfos
		{
			get
			{
				return this._MerchantInfos;
			}
			set
			{
				this._MerchantInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MerchantInfos(MerchantInfo entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_MerchantInfos(MerchantInfo entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FundTransferTransaction")]
	public partial class FundTransferTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _DestPAN;
		
		private string _Amount;
		
		private long _RequestId;
		
		private EntityRef<Request> _Request;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnDestPANChanging(string value);
    partial void OnDestPANChanged();
    partial void OnAmountChanging(string value);
    partial void OnAmountChanged();
    partial void OnRequestIdChanging(long value);
    partial void OnRequestIdChanged();
    #endregion
		
		public FundTransferTransaction()
		{
			this._Request = default(EntityRef<Request>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestPAN", DbType="Char(16)")]
		public string DestPAN
		{
			get
			{
				return this._DestPAN;
			}
			set
			{
				if ((this._DestPAN != value))
				{
					this.OnDestPANChanging(value);
					this.SendPropertyChanging();
					this._DestPAN = value;
					this.SendPropertyChanged("DestPAN");
					this.OnDestPANChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Char(16)")]
		public string Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestId", DbType="BigInt NOT NULL")]
		public long RequestId
		{
			get
			{
				return this._RequestId;
			}
			set
			{
				if ((this._RequestId != value))
				{
					if (this._Request.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestIdChanging(value);
					this.SendPropertyChanging();
					this._RequestId = value;
					this.SendPropertyChanged("RequestId");
					this.OnRequestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_FundTransferTransaction", Storage="_Request", ThisKey="RequestId", OtherKey="Id", IsForeignKey=true)]
		public Request Request
		{
			get
			{
				return this._Request.Entity;
			}
			set
			{
				Request previousValue = this._Request.Entity;
				if (((previousValue != value) 
							|| (this._Request.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Request.Entity = null;
						previousValue.FundTransferTransactions.Remove(this);
					}
					this._Request.Entity = value;
					if ((value != null))
					{
						value.FundTransferTransactions.Add(this);
						this._RequestId = value.Id;
					}
					else
					{
						this._RequestId = default(long);
					}
					this.SendPropertyChanged("Request");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MerchantInfo")]
	public partial class MerchantInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CustomerId;
		
		private string _localIP;
		
		private string _merchantID;
		
		private string _terminalID;
		
		private string _invoiceNo;
		
		private string _Serial;
		
		private string _Mobile;
		
		private EntitySet<Request> _Requests;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCustomerIdChanging(int value);
    partial void OnCustomerIdChanged();
    partial void OnlocalIPChanging(string value);
    partial void OnlocalIPChanged();
    partial void OnmerchantIDChanging(string value);
    partial void OnmerchantIDChanged();
    partial void OnterminalIDChanging(string value);
    partial void OnterminalIDChanged();
    partial void OninvoiceNoChanging(string value);
    partial void OninvoiceNoChanged();
    partial void OnSerialChanging(string value);
    partial void OnSerialChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    #endregion
		
		public MerchantInfo()
		{
			this._Requests = new EntitySet<Request>(new Action<Request>(this.attach_Requests), new Action<Request>(this.detach_Requests));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int NOT NULL")]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_localIP", DbType="Char(30)")]
		public string localIP
		{
			get
			{
				return this._localIP;
			}
			set
			{
				if ((this._localIP != value))
				{
					this.OnlocalIPChanging(value);
					this.SendPropertyChanging();
					this._localIP = value;
					this.SendPropertyChanged("localIP");
					this.OnlocalIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_merchantID", DbType="Char(50)")]
		public string merchantID
		{
			get
			{
				return this._merchantID;
			}
			set
			{
				if ((this._merchantID != value))
				{
					this.OnmerchantIDChanging(value);
					this.SendPropertyChanging();
					this._merchantID = value;
					this.SendPropertyChanged("merchantID");
					this.OnmerchantIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_terminalID", DbType="NVarChar(50)")]
		public string terminalID
		{
			get
			{
				return this._terminalID;
			}
			set
			{
				if ((this._terminalID != value))
				{
					this.OnterminalIDChanging(value);
					this.SendPropertyChanging();
					this._terminalID = value;
					this.SendPropertyChanged("terminalID");
					this.OnterminalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_invoiceNo", DbType="Char(30)")]
		public string invoiceNo
		{
			get
			{
				return this._invoiceNo;
			}
			set
			{
				if ((this._invoiceNo != value))
				{
					this.OninvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._invoiceNo = value;
					this.SendPropertyChanged("invoiceNo");
					this.OninvoiceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Serial", DbType="NChar(50)")]
		public string Serial
		{
			get
			{
				return this._Serial;
			}
			set
			{
				if ((this._Serial != value))
				{
					this.OnSerialChanging(value);
					this.SendPropertyChanging();
					this._Serial = value;
					this.SendPropertyChanged("Serial");
					this.OnSerialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="NChar(11)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MerchantInfo_Request", Storage="_Requests", ThisKey="Id", OtherKey="MerchantInfoId")]
		public EntitySet<Request> Requests
		{
			get
			{
				return this._Requests;
			}
			set
			{
				this._Requests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_MerchantInfo", Storage="_Customer", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.MerchantInfos.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.MerchantInfos.Add(this);
						this._CustomerId = value.Id;
					}
					else
					{
						this._CustomerId = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.MerchantInfo = this;
		}
		
		private void detach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.MerchantInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentTransaction")]
	public partial class PaymentTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Amount;
		
		private System.Nullable<int> _UnitId;
		
		private System.Nullable<long> _RequestId;
		
		private EntityRef<Request> _Request;
		
		private EntityRef<Unit> _Unit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAmountChanging(string value);
    partial void OnAmountChanged();
    partial void OnUnitIdChanging(System.Nullable<int> value);
    partial void OnUnitIdChanged();
    partial void OnRequestIdChanging(System.Nullable<long> value);
    partial void OnRequestIdChanged();
    #endregion
		
		public PaymentTransaction()
		{
			this._Request = default(EntityRef<Request>);
			this._Unit = default(EntityRef<Unit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Char(16)")]
		public string Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitId", DbType="Int")]
		public System.Nullable<int> UnitId
		{
			get
			{
				return this._UnitId;
			}
			set
			{
				if ((this._UnitId != value))
				{
					if (this._Unit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIdChanging(value);
					this.SendPropertyChanging();
					this._UnitId = value;
					this.SendPropertyChanged("UnitId");
					this.OnUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestId", DbType="BigInt")]
		public System.Nullable<long> RequestId
		{
			get
			{
				return this._RequestId;
			}
			set
			{
				if ((this._RequestId != value))
				{
					if (this._Request.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestIdChanging(value);
					this.SendPropertyChanging();
					this._RequestId = value;
					this.SendPropertyChanged("RequestId");
					this.OnRequestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_PaymentTransaction", Storage="_Request", ThisKey="RequestId", OtherKey="Id", IsForeignKey=true)]
		public Request Request
		{
			get
			{
				return this._Request.Entity;
			}
			set
			{
				Request previousValue = this._Request.Entity;
				if (((previousValue != value) 
							|| (this._Request.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Request.Entity = null;
						previousValue.PaymentTransactions.Remove(this);
					}
					this._Request.Entity = value;
					if ((value != null))
					{
						value.PaymentTransactions.Add(this);
						this._RequestId = value.Id;
					}
					else
					{
						this._RequestId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Request");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_PaymentTransaction", Storage="_Unit", ThisKey="UnitId", OtherKey="Id", IsForeignKey=true)]
		public Unit Unit
		{
			get
			{
				return this._Unit.Entity;
			}
			set
			{
				Unit previousValue = this._Unit.Entity;
				if (((previousValue != value) 
							|| (this._Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unit.Entity = null;
						previousValue.PaymentTransactions.Remove(this);
					}
					this._Unit.Entity = value;
					if ((value != null))
					{
						value.PaymentTransactions.Add(this);
						this._UnitId = value.Id;
					}
					else
					{
						this._UnitId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Unit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Request")]
	public partial class Request : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private int _MerchantInfoId;
		
		private string _PAN;
		
		private string _RefNo;
		
		private string _TransactionResponseId;
		
		private System.Nullable<bool> _Success;
		
		private string _STAN;
		
		private EntitySet<BillTransaction> _BillTransactions;
		
		private EntitySet<VoucherTransaction> _VoucherTransactions;
		
		private EntitySet<FundTransferTransaction> _FundTransferTransactions;
		
		private EntitySet<PaymentTransaction> _PaymentTransactions;
		
		private EntitySet<TopupTransaction> _TopupTransactions;
		
		private EntityRef<MerchantInfo> _MerchantInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnMerchantInfoIdChanging(int value);
    partial void OnMerchantInfoIdChanged();
    partial void OnPANChanging(string value);
    partial void OnPANChanged();
    partial void OnRefNoChanging(string value);
    partial void OnRefNoChanged();
    partial void OnTransactionResponseIdChanging(string value);
    partial void OnTransactionResponseIdChanged();
    partial void OnSuccessChanging(System.Nullable<bool> value);
    partial void OnSuccessChanged();
    partial void OnSTANChanging(string value);
    partial void OnSTANChanged();
    #endregion
		
		public Request()
		{
			this._BillTransactions = new EntitySet<BillTransaction>(new Action<BillTransaction>(this.attach_BillTransactions), new Action<BillTransaction>(this.detach_BillTransactions));
			this._VoucherTransactions = new EntitySet<VoucherTransaction>(new Action<VoucherTransaction>(this.attach_VoucherTransactions), new Action<VoucherTransaction>(this.detach_VoucherTransactions));
			this._FundTransferTransactions = new EntitySet<FundTransferTransaction>(new Action<FundTransferTransaction>(this.attach_FundTransferTransactions), new Action<FundTransferTransaction>(this.detach_FundTransferTransactions));
			this._PaymentTransactions = new EntitySet<PaymentTransaction>(new Action<PaymentTransaction>(this.attach_PaymentTransactions), new Action<PaymentTransaction>(this.detach_PaymentTransactions));
			this._TopupTransactions = new EntitySet<TopupTransaction>(new Action<TopupTransaction>(this.attach_TopupTransactions), new Action<TopupTransaction>(this.detach_TopupTransactions));
			this._MerchantInfo = default(EntityRef<MerchantInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MerchantInfoId", DbType="Int NOT NULL")]
		public int MerchantInfoId
		{
			get
			{
				return this._MerchantInfoId;
			}
			set
			{
				if ((this._MerchantInfoId != value))
				{
					if (this._MerchantInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMerchantInfoIdChanging(value);
					this.SendPropertyChanging();
					this._MerchantInfoId = value;
					this.SendPropertyChanged("MerchantInfoId");
					this.OnMerchantInfoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAN", DbType="Char(16)")]
		public string PAN
		{
			get
			{
				return this._PAN;
			}
			set
			{
				if ((this._PAN != value))
				{
					this.OnPANChanging(value);
					this.SendPropertyChanging();
					this._PAN = value;
					this.SendPropertyChanged("PAN");
					this.OnPANChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefNo", DbType="Char(36)")]
		public string RefNo
		{
			get
			{
				return this._RefNo;
			}
			set
			{
				if ((this._RefNo != value))
				{
					this.OnRefNoChanging(value);
					this.SendPropertyChanging();
					this._RefNo = value;
					this.SendPropertyChanged("RefNo");
					this.OnRefNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionResponseId", DbType="Char(30)")]
		public string TransactionResponseId
		{
			get
			{
				return this._TransactionResponseId;
			}
			set
			{
				if ((this._TransactionResponseId != value))
				{
					this.OnTransactionResponseIdChanging(value);
					this.SendPropertyChanging();
					this._TransactionResponseId = value;
					this.SendPropertyChanged("TransactionResponseId");
					this.OnTransactionResponseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Success", DbType="Bit")]
		public System.Nullable<bool> Success
		{
			get
			{
				return this._Success;
			}
			set
			{
				if ((this._Success != value))
				{
					this.OnSuccessChanging(value);
					this.SendPropertyChanging();
					this._Success = value;
					this.SendPropertyChanged("Success");
					this.OnSuccessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STAN", DbType="NChar(50)")]
		public string STAN
		{
			get
			{
				return this._STAN;
			}
			set
			{
				if ((this._STAN != value))
				{
					this.OnSTANChanging(value);
					this.SendPropertyChanging();
					this._STAN = value;
					this.SendPropertyChanged("STAN");
					this.OnSTANChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_BillTransaction", Storage="_BillTransactions", ThisKey="Id", OtherKey="RequestId")]
		public EntitySet<BillTransaction> BillTransactions
		{
			get
			{
				return this._BillTransactions;
			}
			set
			{
				this._BillTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_VoucherTransaction", Storage="_VoucherTransactions", ThisKey="Id", OtherKey="RequestId")]
		public EntitySet<VoucherTransaction> VoucherTransactions
		{
			get
			{
				return this._VoucherTransactions;
			}
			set
			{
				this._VoucherTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_FundTransferTransaction", Storage="_FundTransferTransactions", ThisKey="Id", OtherKey="RequestId")]
		public EntitySet<FundTransferTransaction> FundTransferTransactions
		{
			get
			{
				return this._FundTransferTransactions;
			}
			set
			{
				this._FundTransferTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_PaymentTransaction", Storage="_PaymentTransactions", ThisKey="Id", OtherKey="RequestId")]
		public EntitySet<PaymentTransaction> PaymentTransactions
		{
			get
			{
				return this._PaymentTransactions;
			}
			set
			{
				this._PaymentTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_TopupTransaction", Storage="_TopupTransactions", ThisKey="Id", OtherKey="RequestId")]
		public EntitySet<TopupTransaction> TopupTransactions
		{
			get
			{
				return this._TopupTransactions;
			}
			set
			{
				this._TopupTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MerchantInfo_Request", Storage="_MerchantInfo", ThisKey="MerchantInfoId", OtherKey="Id", IsForeignKey=true)]
		public MerchantInfo MerchantInfo
		{
			get
			{
				return this._MerchantInfo.Entity;
			}
			set
			{
				MerchantInfo previousValue = this._MerchantInfo.Entity;
				if (((previousValue != value) 
							|| (this._MerchantInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MerchantInfo.Entity = null;
						previousValue.Requests.Remove(this);
					}
					this._MerchantInfo.Entity = value;
					if ((value != null))
					{
						value.Requests.Add(this);
						this._MerchantInfoId = value.Id;
					}
					else
					{
						this._MerchantInfoId = default(int);
					}
					this.SendPropertyChanged("MerchantInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BillTransactions(BillTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Request = this;
		}
		
		private void detach_BillTransactions(BillTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Request = null;
		}
		
		private void attach_VoucherTransactions(VoucherTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Request = this;
		}
		
		private void detach_VoucherTransactions(VoucherTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Request = null;
		}
		
		private void attach_FundTransferTransactions(FundTransferTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Request = this;
		}
		
		private void detach_FundTransferTransactions(FundTransferTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Request = null;
		}
		
		private void attach_PaymentTransactions(PaymentTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Request = this;
		}
		
		private void detach_PaymentTransactions(PaymentTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Request = null;
		}
		
		private void attach_TopupTransactions(TopupTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Request = this;
		}
		
		private void detach_TopupTransactions(TopupTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Request = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TopupTransaction")]
	public partial class TopupTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private int _OperatorId;
		
		private string _Amount;
		
		private string _MobileNo;
		
		private long _RequestId;
		
		private EntityRef<Request> _Request;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnOperatorIdChanging(int value);
    partial void OnOperatorIdChanged();
    partial void OnAmountChanging(string value);
    partial void OnAmountChanged();
    partial void OnMobileNoChanging(string value);
    partial void OnMobileNoChanged();
    partial void OnRequestIdChanging(long value);
    partial void OnRequestIdChanged();
    #endregion
		
		public TopupTransaction()
		{
			this._Request = default(EntityRef<Request>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperatorId", DbType="Int NOT NULL")]
		public int OperatorId
		{
			get
			{
				return this._OperatorId;
			}
			set
			{
				if ((this._OperatorId != value))
				{
					this.OnOperatorIdChanging(value);
					this.SendPropertyChanging();
					this._OperatorId = value;
					this.SendPropertyChanged("OperatorId");
					this.OnOperatorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Char(16)")]
		public string Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileNo", DbType="Char(11)")]
		public string MobileNo
		{
			get
			{
				return this._MobileNo;
			}
			set
			{
				if ((this._MobileNo != value))
				{
					this.OnMobileNoChanging(value);
					this.SendPropertyChanging();
					this._MobileNo = value;
					this.SendPropertyChanged("MobileNo");
					this.OnMobileNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestId", DbType="BigInt NOT NULL")]
		public long RequestId
		{
			get
			{
				return this._RequestId;
			}
			set
			{
				if ((this._RequestId != value))
				{
					if (this._Request.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestIdChanging(value);
					this.SendPropertyChanging();
					this._RequestId = value;
					this.SendPropertyChanged("RequestId");
					this.OnRequestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_TopupTransaction", Storage="_Request", ThisKey="RequestId", OtherKey="Id", IsForeignKey=true)]
		public Request Request
		{
			get
			{
				return this._Request.Entity;
			}
			set
			{
				Request previousValue = this._Request.Entity;
				if (((previousValue != value) 
							|| (this._Request.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Request.Entity = null;
						previousValue.TopupTransactions.Remove(this);
					}
					this._Request.Entity = value;
					if ((value != null))
					{
						value.TopupTransactions.Add(this);
						this._RequestId = value.Id;
					}
					else
					{
						this._RequestId = default(long);
					}
					this.SendPropertyChanged("Request");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransactionMask")]
	public partial class TransactionMask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    #endregion
		
		public TransactionMask()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransactionResponseMask")]
	public partial class TransactionResponseMask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    #endregion
		
		public TransactionResponseMask()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Unit")]
	public partial class Unit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _AccountNumber;
		
		private string _UnitName;
		
		private System.Nullable<bool> _IsEnabled;
		
		private string _TellNumber;
		
		private System.Nullable<long> _CustomerId;
		
		private EntitySet<PaymentTransaction> _PaymentTransactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnUnitNameChanging(string value);
    partial void OnUnitNameChanged();
    partial void OnIsEnabledChanging(System.Nullable<bool> value);
    partial void OnIsEnabledChanged();
    partial void OnTellNumberChanging(string value);
    partial void OnTellNumberChanged();
    partial void OnCustomerIdChanging(System.Nullable<long> value);
    partial void OnCustomerIdChanged();
    #endregion
		
		public Unit()
		{
			this._PaymentTransactions = new EntitySet<PaymentTransaction>(new Action<PaymentTransaction>(this.attach_PaymentTransactions), new Action<PaymentTransaction>(this.detach_PaymentTransactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNumber", DbType="NVarChar(30)")]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitName", DbType="NVarChar(50)")]
		public string UnitName
		{
			get
			{
				return this._UnitName;
			}
			set
			{
				if ((this._UnitName != value))
				{
					this.OnUnitNameChanging(value);
					this.SendPropertyChanging();
					this._UnitName = value;
					this.SendPropertyChanged("UnitName");
					this.OnUnitNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEnabled", DbType="Bit")]
		public System.Nullable<bool> IsEnabled
		{
			get
			{
				return this._IsEnabled;
			}
			set
			{
				if ((this._IsEnabled != value))
				{
					this.OnIsEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsEnabled = value;
					this.SendPropertyChanged("IsEnabled");
					this.OnIsEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TellNumber", DbType="NVarChar(30)")]
		public string TellNumber
		{
			get
			{
				return this._TellNumber;
			}
			set
			{
				if ((this._TellNumber != value))
				{
					this.OnTellNumberChanging(value);
					this.SendPropertyChanging();
					this._TellNumber = value;
					this.SendPropertyChanged("TellNumber");
					this.OnTellNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="BigInt")]
		public System.Nullable<long> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_PaymentTransaction", Storage="_PaymentTransactions", ThisKey="Id", OtherKey="UnitId")]
		public EntitySet<PaymentTransaction> PaymentTransactions
		{
			get
			{
				return this._PaymentTransactions;
			}
			set
			{
				this._PaymentTransactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PaymentTransactions(PaymentTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Unit = this;
		}
		
		private void detach_PaymentTransactions(PaymentTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Unit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClientInfo")]
	public partial class ClientInfo
	{
		
		private string _CompanyName;
		
		private string _BusinessTell;
		
		private int _CustomerId;
		
		private System.Nullable<bool> _hasEppKeyboard;
		
		public ClientInfo()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(100)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this._CompanyName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessTell", DbType="NChar(10)")]
		public string BusinessTell
		{
			get
			{
				return this._BusinessTell;
			}
			set
			{
				if ((this._BusinessTell != value))
				{
					this._BusinessTell = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int NOT NULL")]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this._CustomerId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hasEppKeyboard", DbType="Bit")]
		public System.Nullable<bool> HasEppKeyboard
		{
			get
			{
				return this._hasEppKeyboard;
			}
			set
			{
				if ((this._hasEppKeyboard != value))
				{
					this._hasEppKeyboard = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
